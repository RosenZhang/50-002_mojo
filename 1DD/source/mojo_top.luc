module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [6],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    input outbutton[6],
    input resetbutton,
    input confirmbutton,
    input modeswitch[2],
    output ledplayer[2]
  ) {
  
  sig rst;                  // reset signal
  
  fsm state(.clk(clk),#INIT(START))={START,PICKING1,PICKING2,PICKINGBOT};
  
  .clk(clk) {
    edge_detector edge_detector1;
  button_conditioner button_cond1;
    edge_detector edge_detector2;
  button_conditioner button_cond2;
    edge_detector edge_detector3;
  button_conditioner button_cond3;
    edge_detector edge_detector4;
 button_conditioner button_cond4;
    edge_detector edge_detector5;
  button_conditioner button_cond5;
   edge_detector edge_detector6;
  button_conditioner button_cond6;
    edge_detector edge_detector7;
  button_conditioner button_cond7;
    edge_detector edge_detector8;
  button_conditioner button_cond8;
  // The reset conditioner is used to synchronize the reset signal to the FPGA
  // clock. This ensures the entire FPGA comes out of reset at the same time.
  reset_conditioner reset_cond;
 
  .rst(rst) {
    multi_seven_seg seg(#DIGITS(6));
    dff a[6][4];
    dff f1;
      dff f2;
      dff f3;
      dff f4;
      dff f5;
      dff f6;
      dff f8;
      dff f9;
      dff f10;
      dff f11[30];
      dff inputscounter;
  }
}
  
  
  
  sig z[4];
  const CASES=10;
  sig b[CASES][3][4];
  var x,y,i,j,bb;
  always {
    b[0]={4h9,4h5,4h3};
    b[1]={4h2,4h7,4h8};
    b[2]={4h8,4h6,4h4};
    b[3]={4h7,4h3,4h9};
    b[4]={4h6,4h8,4h5};
    b[5]={4h2,4h5,4h9};
    b[6]={4h7,4h6,4h8};
    b[7]={4h9,4h9,4h7};
    b[8]={4h3,4h7,4h6};
    b[9]={4h8,4h2,4h5};
    ledplayer[0]=1-f9.q;
    ledplayer[1]=1-f10.q;
    led=0;
    seg.values=a.q;
    if (state.q==state.PICKINGBOT){
      if (f11.q>60000000){
        x=a.q[0] ^ a.q[1] ^ a.q[2];
      y=0;
      if (a.q[y]<a.q[1]){
        y=1;
      }
      if (a.q[y]<a.q[2]){
        y=2;
      }
      bb=0;
      if (x==0) {
        a.d[y]=a.q[y]-1;
      } else if (x<=a.q[y]){
        a.d[y]=a.q[y]-x;
        j=1;
        for (i=0;i<3;i++){
          if (i!=y){
            if (a.q[i]!=0){
              j=0;
            }
          }
        }
        if (j==1 && (a.q[y]-x)==0){
          state.d=state.START;
          bb=1;
          f9.d=0;
          f10.d=0;
        }
      } else {
        z[3]=0;
        for (i=0;i<3;i++){
          x=0;
          for (j=0;j<3;j++){
            if (j!=y){
              x=x+a.q[j][i];
            }
          }
          if (x==1) z[i]=1; else z[i]=0;
        }
        a.d[y]=z;
        j=1;
        for (i=0;i<3;i++){
          if (i!=y){
            if (a.q[i]!=0){
              j=0;
            }
          }
        }
        if (j==1 && (z)==0){
          state.d=state.START;
          f9.d=0;
          f10.d=0;
          bb=1;
        }
      }
      if (bb==0){
        state.d=state.PICKING1;
        f9.d=1;
        f10.d=0;
      }
      } else {
      f11.d=f11.q+1;
      }
    }
    button_cond1.in=outbutton[0];
    edge_detector1.in = button_cond1.out;
    x = edge_detector1.out;
    if (x==1){
      if (f1.q==1){
        if (a.q[3]>0) a.d[3]=a.q[3]-1;
        f1.d=0;
      } else {
        f1.d=1;
      }
    }
    
    button_cond2.in=outbutton[1];
    edge_detector2.in = button_cond2.out;
    x = edge_detector2.out;
    if (x==1){
      a.d[4]=4h0;
      a.d[5]=4h0;
      if (f2.q==1){
        if (a.q[3]<a.q[0]) a.d[3]=a.q[3]+1;
        f2.d=0;
      } else {
        f2.d=1;
      }
    }
    
    button_cond3.in=outbutton[2];
    edge_detector3.in = button_cond3.out;
    x = edge_detector3.out;
    if (x==1){
      if (f3.q==1){
        if (a.q[4]>0) a.d[4]=a.q[4]-1;
        f3.d=0;
      } else {
        f3.d=1;
      }
    }
    
    button_cond4.in=outbutton[3];
    edge_detector4.in = button_cond4.out;
    x = edge_detector4.out;
    if (x==1){
      a.d[3]=4h0;
      a.d[5]=4h0;
      if (f4.q==1){
        if (a.q[4]<a.q[1]) a.d[4]=a.q[4]+1;
        f4.d=0;
      } else {
        f4.d=1;
      }
    }
    
    button_cond5.in=outbutton[4];
    edge_detector5.in = button_cond5.out;
    x = edge_detector5.out;
    if (x==1){
      if (f5.q==1){
        if (a.q[5]>0) a.d[5]=a.q[5]-1;
        f5.d=0;
      } else {
        f5.d=1;
      }
    }
    
    button_cond6.in=outbutton[5];
    edge_detector6.in = button_cond6.out;
    x = edge_detector6.out;
    if (x==1){
      a.d[3]=4h0;
      a.d[4]=4h0;
      if (f6.q==1){
        if (a.q[5]<a.q[2]) a.d[5]=a.q[5]+1;
        f6.d=0;
      } else {
        f6.d=1;
      }
    }
    
    button_cond7.in=resetbutton;
    edge_detector7.in = button_cond7.out;
    x = edge_detector7.out;
    if (x==1){
      state.d=state.START;
      f9.d=0;
      f10.d=0;
      a.d[0]=4h0;
      a.d[1]=4h0;
      a.d[2]=4h0;
      a.d[3]=4h0;
      a.d[4]=4h0;
      a.d[5]=4h0;
    }
    
    button_cond8.in=confirmbutton;
    edge_detector8.in = button_cond8.out;
    x = edge_detector8.out;
    if (x==1){
      if (f8.q==0){
        if (state.q==state.START){
          state.d=state.PICKING1;
          f9.d=1;
          f10.d=0;
          if (inputscounter.q==9) inputscounter.d=0; else inputscounter.d=inputscounter.q+1;
          
          a.d[0]=b[inputscounter.q][0];
          a.d[1]=b[inputscounter.q][1];
          a.d[2]=b[inputscounter.q][2];
          a.d[3]=0;
          a.d[4]=0;
          a.d[5]=0;
        } else {
          if (a.q[3]!=0 || a.q[4]!=0 || a.q[5]!=0){
            a.d[0]=a.q[0]-a.q[3];
            a.d[1]=a.q[1]-a.q[4];
            a.d[2]=a.q[2]-a.q[5];
            a.d[3]=0;
            a.d[4]=0;
            a.d[5]=0;
            if ((a.q[0]-a.q[3])==0 && (a.q[1]-a.q[4])==0 && (a.q[2]-a.q[5])==0) {
              
              if (state.q==state.PICKING1){
                led[5]=1;
                led[6]=0;
              } else {
                led[6]=1;
                led[5]=0;
              }  
              state.d=state.START;
              f9.d=0;
              f10.d=0;
            }
          } else {
            led[0]=1;
          }
          if (state.q==state.PICKING1){
            if (modeswitch[1]==1){
              state.d=state.PICKINGBOT;
              f11.d=0;
            } else {
              state.d=state.PICKING2;
            }
            f9.d=0;
            f10.d=1;
          } else {
            f9.d=1;
            f10.d=0;
            state.d=state.PICKING1;
          }  
        }
      f8.d=1;
      } else f8.d=0;
    }

    
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
    led[1]=modeswitch[0];
    led[2]=modeswitch[1];
    spi_miso = bz;            // not using SPI
    spi_channel = bzzzz;      // not using flags
    avr_rx = bz;              // not using serial port
    io_seg = ~seg.seg; // connect segments to the driver
    io_sel = seg.sel; // connect digit select to the driver
  }    
}